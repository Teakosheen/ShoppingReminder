package com.example.myshoppingreminder;

import android.app.Application;
import android.os.AsyncTask;

import androidx.lifecycle.LiveData;

import java.util.List;

// this class provides abstraction layer on the top of different data sources
public class ProductRepository {

    private ProductDao productDao;
    private LiveData<List<Product>> shoppingList;
    private LiveData<List<Product>> shoppingListByEmail;
    private String email;


    public ProductRepository(Application application, String email) {
        this.email= email;
        ProductDatabase database = ProductDatabase.getInstance(application);
        productDao = database.productDao(); // the implementation of the method os autogenerated by Room
        shoppingList = productDao.getShoppingList();
        shoppingListByEmail = productDao.getShoppingListByEmail(email);
    }

// these methods are the the api which the repository will expose
    public void insert(Product product) {
        new InsertProductAsyncTask(productDao).execute(product);
    }
    public void delete(Product product) {
        new DeleteProductAsyncTask(productDao).execute(product);
    }
    public void update(Product product) {
        new UpdateProductAsyncTask(productDao).execute(product);
    }
    public void deleteShoppingList() {
        new DeleteShoppingListAsyncTask(productDao).execute();
    }
    public void deleteShoppingListByEmail(String email) {
        new DeleteShoppingListAsyncTaskByEmail(productDao, email).execute();
    }
    public LiveData<List<Product>> getShoppingList() {
        return shoppingList;
    }
    public LiveData<List<Product>> getShoppingListByEmail(String email) {
        return shoppingListByEmail;
    }


// the room does not allow the database operations in the main thread so they are done in the background in multiple tasks
    private static class InsertProductAsyncTask extends AsyncTask<Product, Void, Void> {
        private ProductDao productDao;

        private InsertProductAsyncTask(ProductDao productDao) {
            this.productDao = productDao;
        }
        @Override
        protected Void doInBackground(Product... products) {
            productDao.insert(products[0]);
            return null;
        }
    }
    private static class DeleteProductAsyncTask extends AsyncTask<Product, Void, Void> {
        private ProductDao productDao;

        private DeleteProductAsyncTask(ProductDao productDao) {
            this.productDao = productDao;
        }
        @Override
        protected Void doInBackground(Product... products) {
        productDao.delete(products[0]);
        return null;
        }
    }
    private static class UpdateProductAsyncTask extends AsyncTask<Product, Void, Void> {
        private ProductDao productDao;

        private UpdateProductAsyncTask(ProductDao productDao) {
            this.productDao = productDao;
        }
        @Override
        protected Void doInBackground(Product... products) {
            productDao.update(products[0]);
            return null;
        }
    }

    private static class DeleteShoppingListAsyncTask extends AsyncTask<Void, Void, Void> {
        private ProductDao productDao;

        private DeleteShoppingListAsyncTask(ProductDao productDao) {
            this.productDao = productDao;
        }
        @Override
        protected Void doInBackground(Void... voids) {
            productDao.deleteShoppingList();
            return null;
        }
    }

    private static class DeleteShoppingListAsyncTaskByEmail extends AsyncTask<Void, Void, Void> {
        private ProductDao productDao;
        private String email;


        private DeleteShoppingListAsyncTaskByEmail(ProductDao productDao, String email) {
            this.productDao = productDao;
            this.email= email;
        }
        @Override
        protected Void doInBackground(Void... voids) {
            productDao.deleteShoppingListByEmail(email);
            return null;
        }
    }


    }
